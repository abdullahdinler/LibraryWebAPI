// <auto-generated />
using System;
using Library.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Repository.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Core.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addres = "Ev adresi 1"
                        },
                        new
                        {
                            Id = 2,
                            Addres = "Ev adresi 2"
                        },
                        new
                        {
                            Id = 3,
                            Addres = "Ev adresi 3"
                        },
                        new
                        {
                            Id = 4,
                            Addres = "Ev adresi 4"
                        },
                        new
                        {
                            Id = 5,
                            Addres = "Ev adresi 5"
                        },
                        new
                        {
                            Id = 6,
                            Addres = "Ev adresi 6"
                        },
                        new
                        {
                            Id = 7,
                            Addres = "Ev adresi 7"
                        },
                        new
                        {
                            Id = 8,
                            Addres = "Ev adresi 8"
                        },
                        new
                        {
                            Id = 9,
                            Addres = "Ev adresi 9"
                        },
                        new
                        {
                            Id = 10,
                            Addres = "Ev adresi 10"
                        },
                        new
                        {
                            Id = 11,
                            Addres = "Ev adresi 11"
                        },
                        new
                        {
                            Id = 12,
                            Addres = "Ev adresi 12"
                        },
                        new
                        {
                            Id = 13,
                            Addres = "Ev adresi 13"
                        },
                        new
                        {
                            Id = 14,
                            Addres = "Ev adresi 14"
                        },
                        new
                        {
                            Id = 15,
                            Addres = "Ev adresi 15"
                        });
                });

            modelBuilder.Entity("Library.Core.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Author 1",
                            LastName = "Author LastName 1"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Author 2",
                            LastName = "Author LastName 2"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Author 3",
                            LastName = "Author LastName 3"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Author 4",
                            LastName = "Author LastName 4"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Author 5",
                            LastName = "Author LastName 5"
                        });
                });

            modelBuilder.Entity("Library.Core.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Cover = "Cover 1",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2624),
                            GenreId = 1,
                            Status = "Status 1",
                            Title = "Book 1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Cover = "Cover 2",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2639),
                            GenreId = 2,
                            Status = "Status 2",
                            Title = "Book 2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Cover = "Cover 3",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2641),
                            GenreId = 3,
                            Status = "Status 3",
                            Title = "Book 3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Cover = "Cover 4",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2643),
                            GenreId = 4,
                            Status = "Status 4",
                            Title = "Book 4"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Cover = "Cover 5",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2645),
                            GenreId = 5,
                            Status = "Status 5",
                            Title = "Book 5"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            Cover = "Cover 6",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2647),
                            GenreId = 1,
                            Status = "Status 6",
                            Title = "Book 6"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            Cover = "Cover 7",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2648),
                            GenreId = 2,
                            Status = "Status 7",
                            Title = "Book 7"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 3,
                            Cover = "Cover 8",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2652),
                            GenreId = 3,
                            Status = "Status 8",
                            Title = "Book 8"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 4,
                            Cover = "Cover 9",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2653),
                            GenreId = 4,
                            Status = "Status 9",
                            Title = "Book 9"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            Cover = "Cover 10",
                            DateAdded = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2655),
                            GenreId = 5,
                            Status = "Status 10",
                            Title = "Book 10"
                        });
                });

            modelBuilder.Entity("Library.Core.Models.BorrowedRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            BorrowDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2900),
                            ReturnDate = new DateTime(2023, 5, 19, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2903),
                            Status = "Status 1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            BorrowDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2909),
                            ReturnDate = new DateTime(2023, 5, 19, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2910),
                            Status = "Status 2",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            BorrowDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2912),
                            ReturnDate = new DateTime(2023, 5, 19, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2912),
                            Status = "Status 3",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            BorrowDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2914),
                            ReturnDate = new DateTime(2023, 5, 19, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2914),
                            Status = "Status 4",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            BorrowDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2916),
                            ReturnDate = new DateTime(2023, 5, 19, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(2916),
                            Status = "Status 5",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Library.Core.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Genre 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Genre 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Genre 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Genre 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Genre 5"
                        });
                });

            modelBuilder.Entity("Library.Core.Models.ReturnedRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("ReturnedRecord");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            ReturnDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(3518),
                            Status = "Status 1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            ReturnDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(3523),
                            Status = "Status 2",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            ReturnDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(3525),
                            Status = "Status 3",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            ReturnDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(3527),
                            Status = "Status 4",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            ReturnDate = new DateTime(2023, 5, 4, 15, 58, 4, 334, DateTimeKind.Local).AddTicks(3528),
                            Status = "Status 5",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Library.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "mail1@mail.com",
                            FirstName = "User 1",
                            LastName = "User LastName 1",
                            Phone = "11111111111",
                            Status = "Status 1"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "mail2@mail.com",
                            FirstName = "User 2",
                            LastName = "User LastName 2",
                            Phone = "22222222222",
                            Status = "Status 2"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Email = "mail3@mail.com",
                            FirstName = "User 3",
                            LastName = "User LastName 3",
                            Phone = "33333333333",
                            Status = "Status 3"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Email = "mail4@mail.com",
                            FirstName = "User 4",
                            LastName = "User LastName 4",
                            Phone = "44444444444",
                            Status = "Status 4"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Email = "mail5@mail.com",
                            FirstName = "User 5",
                            LastName = "User LastName 5",
                            Phone = "55555555555",
                            Status = "Status 5"
                        });
                });

            modelBuilder.Entity("Library.Core.Models.Book", b =>
                {
                    b.HasOne("Library.Core.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Core.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Library.Core.Models.BorrowedRecord", b =>
                {
                    b.HasOne("Library.Core.Models.Book", "Book")
                        .WithMany("BorrowedRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Core.Models.User", "User")
                        .WithMany("BorrowedRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Core.Models.ReturnedRecord", b =>
                {
                    b.HasOne("Library.Core.Models.Book", "Book")
                        .WithMany("ReturnedRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Core.Models.User", "User")
                        .WithMany("ReturnedRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Core.Models.User", b =>
                {
                    b.HasOne("Library.Core.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Library.Core.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Core.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Core.Models.Book", b =>
                {
                    b.Navigation("BorrowedRecords");

                    b.Navigation("ReturnedRecords");
                });

            modelBuilder.Entity("Library.Core.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Core.Models.User", b =>
                {
                    b.Navigation("BorrowedRecords");

                    b.Navigation("ReturnedRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
